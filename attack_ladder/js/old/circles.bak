var x=800,
    y=40,
    radius = 20;

// Activate node mode
scope.nodeMode = false;
scope.activateNodeMode = function(selection) {
   scope.nodeMode = !scope.nodeMode
   if(scope.nodeMode) {
      d3.select("#nodeCtrl").attr("class", "selected-ctrl");
   }
   else {
      d3.select("#nodeCtrl").attr("class", "control");
   }
   // TODO might need to change
   if(scope.connMode) {
      scope.connMode = false;
      d3.select("#connCtrl").attr("class", "control");
   }
}

//Drag behavior for circles
var drag = d3.behavior.drag()
             .origin(function(d) {return d;})
             .on("drag", dragmove);
   //             .on("dragend", dragended);


// On drag
var dragmove = function(d) {
   if(!scope.connMode) {
      d.x=Math.max(radius, Math.min(scope.w - radius, d3.event.x));
      d.y=Math.max(radius, Math.min(scope.h - radius, d3.event.y));
      d3.select(this)
        .attr("transform", "translate(" + d.x + "," + d.y +")");
   }
};

var createNodeGroup = function() {
      //Ignore the click event 
   if (d3.event.defaultPrevented) return;

   if(scope.nodeMode) {
      // Extract the click location    
      var point = d3.mouse(this),
      p = { x: point[0], y: point[1] };

      // Node model
      var newNode = scope.svg.append("g")
                    .attr("transform", "translate(" + p.x + "," + p.y +")")
                    .style("cursor", "pointer")
                    .call(drag);              

      // New circle from the model that is going to be dragged in the workspace
      var newCircle = newNode.append("circle")
            .attr("cx", 0)
            .attr("cy", 0)
            .attr("r", 20)
            .attr("class", "node");

      // var newGroup = newNode.append("g");

      // newGroup.append("rect")
      //      .attr("width", connPW)
      //      .attr("height", connPH)
      //      .attr("class", "conn-point")
      //      .attr("transform", "translate(-3,-26)")
      //      // .on("mousedown",startLineDraw);

      // newGroup.append("rect")
      //      .attr("width", connPW)
      //      .attr("height", connPH)
      //      .attr("class", "conn-point")
      //      .attr("transform", "translate(20,0)")
      //      // .on("mousedown",startLineDraw);

      // newGroup.append("rect")
      //      .attr("width", connPW)
      //      .attr("height", connPH)
      //      .attr("class", "conn-point")
      //      .attr("transform", "translate(-3,20)")
      //      // .on("mousedown",startLineDraw);

      // newGroup.append("rect")
      //      .attr("width", connPW)
      //      .attr("height", connPH)
      //      .attr("class", "conn-point")
      //      .attr("transform", "translate(-26,0)")
      //      // .on("mousedown",startLineDraw);
   }
}

var createNode = function(x, y) {
   scope.model = scope.svg.append("circle")
                     .attr("cx", x)
                     .attr("cy", y)
                     .attr("r", radius)
                     .attr("class", "node")
                     .style("cursor", "pointer") //TODO make the cursor to pointer only in connection mode
                     .on("mousedown", scope.activateNodeMode);
}

createNode(x, y);
scope.workfield.on("mousedown", createNodeGroup);